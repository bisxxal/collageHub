generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(cuid())
  userName String @unique
  CollageName String @default("tact")
  clerkId String  @default("1") @unique
  firstName String?
  lastName String?
  email String? 
}

model Student {
  id        String     @id @default(cuid())
  username  String     @unique
  name      String
  surname   String
  email     String?    @unique
  phone     String?    @unique
  address   String?
  img       String?
  gender    Usergender
  createdAt DateTime   @default(now())
  classId   Int
  gradeId   Int
  batch Batch
  grade Grade @relation(fields: [gradeId], references: [id])
  class Class @relation(fields: [classId], references: [id])
  CollageName String @default("tact")

  
  fee  Fee[]
  results     Result[]
  attendances Attendance[]
}

model Teacher {
  id        String     @id @default(cuid())
  username  String     @unique
  name      String
  surname   String
  email     String?    @unique
  phone     String?    @unique
  img       String?
  gender    Usergender
  createdAt DateTime   @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]

  CollageName String @default("tact")
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  students Student[]
  classess Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId String?
  supervisor   Teacher?  @relation(fields: [supervisorId], references: [id])
  lessons      Lesson[]
  students     Student[]
  gradeId      Int
  grade        Grade     @relation(fields: [gradeId], references: [id])
  events       Event[]

  CollageName String @default("tact")
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
  CollageName String @default("tact")
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
  CollageName String @default("tact")
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
  CollageName String @default("tact")
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
  CollageName String @default("tact")
}

model Result {
  id    Int @id @default(autoincrement())
  score Int
  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
  CollageName String @default("tact")

   @@unique([studentId, lessonId, date]) // This enables the compound key
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  class   Class[]
  CollageName String @default("tact")
}

enum Usergender {
  MALE
  FEMALE
}
model Fee{
  id Int @id @default(autoincrement())
  amount Float
  semesterName Sem
  razorpay_payment_id String?
  razorpay_order_id String?
  studentId String
  student Student @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())
  CollageName String @default("tact")
}

model Semester{
  id Int @id @default(autoincrement())
  name String
  startDate DateTime
  endDate DateTime
  CollageName String @default("tact")
  
  createdAt DateTime @default(now())
} 
 
enum Sem {
 FIRST
 SECOND
 THIRD
 FOURTH
 FIFTH
 SIXTH
 SEVENTH
 EIGHTH
}
enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
enum Batch {
  BCA
  MCA
  BBA
  BTECH
  MTECH
  BSC
  MSC
}